{"version":3,"sources":["online-quiz-app/components/CreateQuiz.js","online-quiz-app/components/Timer.js","online-quiz-app/components/TakeQuiz.js","online-quiz-app/components/Result.js","App.js","index.js"],"names":["CreateQuiz","_ref","setQuizData","questions","setQuestions","useState","question","setQuestion","options","setOptions","correctAnswer","setCorrectAnswer","currentQuestionIndex","setCurrentQuestionIndex","navigate","useNavigate","React","createElement","className","type","placeholder","value","onChange","e","target","map","option","index","key","handleOptionChange","updatedOptions","parseInt","onClick","handlePreviousQuestion","prevIndex","prevQuestion","length","disabled","handleAddQuestion","every","opt","newQuestions","push","handleNextQuestion","nextIndex","nextQuestion","startQuiz","Timer","setTimeUp","duration","time","setTime","useEffect","timerId","setInterval","clearInterval","TakeQuiz","quizData","setScore","selectedAnswer","setSelectedAnswer","timeUp","prevScore","handleSubmit","Result","score","totalQuestions","restartQuiz","App","Router","Routes","Route","path","element","Navigate","to","replace","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.1b2141b3.chunk.js","sourcesContent":["\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nfunction CreateQuiz({ setQuizData }) {\n  const [questions, setQuestions] = useState([]);\n  const [question, setQuestion] = useState('');\n  const [options, setOptions] = useState(['', '', '', '']);\n  const [correctAnswer, setCorrectAnswer] = useState(null);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(-1); // Track the index of the current question being edited\n  const navigate = useNavigate();\n\n  // Function to handle updating options\n  const handleOptionChange = (index, value) => {\n    const updatedOptions = [...options];\n    updatedOptions[index] = value;\n    setOptions(updatedOptions);\n  };\n\n  const handleAddQuestion = () => {\n    if (question && correctAnswer !== null && options.every(opt => opt !== '')) {\n      const newQuestions = [...questions];\n      if (currentQuestionIndex !== -1) {\n        newQuestions[currentQuestionIndex] = { question, options, correctAnswer };\n      } else {\n        //  to add new question\n        newQuestions.push({ question, options, correctAnswer });\n      }\n\n      setQuestions(newQuestions);\n      setQuestion('');\n      setOptions(['', '', '', '']);\n      setCorrectAnswer(null);\n      setCurrentQuestionIndex(-1); \n    }\n  };\n\n  const handlePreviousQuestion = () => {\n    if (currentQuestionIndex > 0) {\n      const prevIndex = currentQuestionIndex - 1;\n      const prevQuestion = questions[prevIndex];\n      setQuestion(prevQuestion.question);\n      setOptions(prevQuestion.options);\n      setCorrectAnswer(prevQuestion.correctAnswer);\n      setCurrentQuestionIndex(prevIndex);\n    } else if (currentQuestionIndex === -1 && questions.length > 0) {\n      const prevIndex = questions.length - 1;\n      const prevQuestion = questions[prevIndex];\n      setQuestion(prevQuestion.question);\n      setOptions(prevQuestion.options);\n      setCorrectAnswer(prevQuestion.correctAnswer);\n      setCurrentQuestionIndex(prevIndex);\n    }\n  };\n\n  const handleNextQuestion = () => {\n    if (currentQuestionIndex < questions.length - 1) {\n      const nextIndex = currentQuestionIndex + 1;\n      const nextQuestion = questions[nextIndex];\n      setQuestion(nextQuestion.question);\n      setOptions(nextQuestion.options);\n      setCorrectAnswer(nextQuestion.correctAnswer);\n      setCurrentQuestionIndex(nextIndex);\n    }\n  };\n\n  const startQuiz = () => {\n    if (question && correctAnswer !== null && options.every(opt => opt !== '')) {\n      setQuestions([...questions, { question, options, correctAnswer }]);\n      setQuizData([...questions, { question, options, correctAnswer }]);\n    } else {\n      setQuizData(questions);\n    }\n    navigate('/take-quiz');\n  };\n\n  return (\n    <div className=\"create-quiz-container\">\n      <h2>Create Your Quiz</h2>\n      <input\n        type=\"text\"\n        placeholder=\"Enter question\"\n        value={question}\n        onChange={(e) => setQuestion(e.target.value)}\n      />\n      <div className=\"options-container\">\n        {options.map((option, index) => (\n          <input\n            key={index}\n            type=\"text\"\n            placeholder={`Option ${index + 1}`}\n            value={option}\n            onChange={(e) => handleOptionChange(index, e.target.value)}\n          />\n        ))}\n      </div>\n      <select\n        onChange={(e) => setCorrectAnswer(parseInt(e.target.value))}\n        value={correctAnswer !== null ? correctAnswer : ''}\n      >\n        <option value=\"\">Select Correct Answer</option>\n        {options.map((option, index) => (\n          <option key={index} value={index}>\n            {option}\n          </option>\n        ))}\n      </select>\n      <div>\n        <button onClick={handlePreviousQuestion} disabled={questions.length === 0}>\n          Previous\n        </button>\n        <button onClick={handleAddQuestion}>\n          {currentQuestionIndex === -1 ? 'Add Question' : 'Update Question'}\n        </button>\n        <button onClick={handleNextQuestion} disabled={currentQuestionIndex >= questions.length - 1 || currentQuestionIndex === -1}>\n          Next\n        </button>\n        <button onClick={startQuiz} disabled={questions.length === 0}>\n          Start Quiz\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default CreateQuiz;\n","import React, { useState, useEffect } from 'react';\nfunction Timer({ setTimeUp, duration }) {\n  const [time, setTime] = useState(duration);\n  useEffect(() => {\n    if (time > 0) {\n      const timerId = setInterval(() => setTime(time - 1), 1000);\n      return () => clearInterval(timerId);\n    } else {\n      setTimeUp(true);\n    }\n  }, [time, setTimeUp]);\n\n  return <div className=\"timer\">Time Remaining: {time} seconds</div>;\n}\nexport default Timer;\n","import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Timer from './Timer';\n\nfunction TakeQuiz({ quizData, setScore }) {\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [timeUp, setTimeUp] = useState(false);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (timeUp) {\n      handleNextQuestion();\n    }\n  }, [timeUp]);\n  useEffect(() => {\n    setScore(0);\n  }, [setScore]);\n\n  const handleNextQuestion = () => {\n    if (selectedAnswer === quizData[currentQuestionIndex].correctAnswer) {\n      setScore((prevScore) => prevScore + 1);\n    }\n\n    setSelectedAnswer(null);\n    setTimeUp(false);\n\n    if (currentQuestionIndex < quizData.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    } else {\n      navigate('/result');\n    }\n  };\n\n  const handleSubmit = () => {\n    if (selectedAnswer === quizData[currentQuestionIndex].correctAnswer) {\n        setScore((prevScore) => prevScore + 1); \n    }\n    navigate('/result');\n};\n\n  return (\n    <div className=\"take-quiz-container\">\n      <h2>BrightChamps Quiz Time!</h2>\n      <Timer key={currentQuestionIndex} setTimeUp={setTimeUp} duration={10} />\n      <h3>{quizData[currentQuestionIndex].question}</h3>\n      <div className=\"options-container\">\n        {quizData[currentQuestionIndex].options.map((option, index) => (\n          <button\n            key={index}\n            onClick={() => setSelectedAnswer(index)}\n            className={selectedAnswer === index ? 'selected' : ''}\n          >\n            {option}\n          </button>\n        ))}\n      </div>\n      {currentQuestionIndex === quizData.length - 1 ? (\n        <button onClick={handleSubmit} disabled={selectedAnswer === null}>\n          Submit\n        </button>\n      ) : (\n        <button onClick={handleNextQuestion} disabled={selectedAnswer === null}>\n          Next\n        </button>\n      )}\n    </div>\n  );\n}\n\nexport default TakeQuiz;\n","import React from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nfunction Result({ score, totalQuestions }) {\n  const navigate = useNavigate();\n\n  const restartQuiz = () => {\n    navigate('/');\n  };\n\n  return (\n    <div className=\"result-container\">\n      <h2>Quiz Completed!</h2>\n      <p>Thank you for taking the test. Your response has been submitted.</p>\n      <p>Your Score: {score} out of {totalQuestions}</p>\n      <button onClick={restartQuiz} className=\"btn\">\n        Create New Quiz\n      </button>\n    </div>\n  );\n}\n\nexport default Result;\n","\n// import React, { useState } from 'react';\n// import { BrowserRouter as Router, Routes, Route, Navigate  } from 'react-router-dom';\n// import CreateQuiz from './online-quiz-app/components/CreateQuiz';\n// import TakeQuiz from './online-quiz-app/components/TakeQuiz';\n// import Result from './online-quiz-app/components/Result';\n// import './styles.css';\n\n// function App() {\n//   const [quizData, setQuizData] = useState([]);\n//   const [score, setScore] = useState(0);\n\n//   return (\n  \n    \n//       <div className=\"App\">\n//         <header className=\"header\">\n//           <h1>Online Quiz Platform</h1>\n//         </header>\n//         <Router >\n//         <Routes>\n//           <Route path=\"/\" element={<CreateQuiz setQuizData={setQuizData} />} />\n//           <Route path=\"/take-quiz\" element={<TakeQuiz quizData={quizData} setScore={setScore} />} />\n//           <Route path=\"/result\" element={<Result score={score} totalQuestions={quizData.length} />} />\n//           <Route path=\"*\" element={<Navigate to=\"/\" />} />\n//         </Routes>\n//         </Router>\n//       </div>\n   \n//   );\n// }\n\n// export default App;\n\nimport React, { useState } from 'react';\nimport { HashRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\nimport CreateQuiz from './online-quiz-app/components/CreateQuiz';\nimport TakeQuiz from './online-quiz-app/components/TakeQuiz';\nimport Result from './online-quiz-app/components/Result';\nimport './styles.css';\n\nfunction App() {\n  const [quizData, setQuizData] = useState([]);\n  const [score, setScore] = useState(0);\n\n  return (\n    <div className=\"App\">\n      <header className=\"header\">\n        <h1>Online Quiz Platform</h1>\n      </header>\n      <Router>\n        <Routes>\n          <Route path=\"/\" element={<CreateQuiz setQuizData={setQuizData} />} />\n          <Route path=\"/take-quiz\" element={<TakeQuiz quizData={quizData} setScore={setScore} />} />\n          <Route path=\"/result\" element={<Result score={score} totalQuestions={quizData.length} />} />\n          <Route path=\"*\" element={<Navigate to=\"/\" replace />} />\n        </Routes>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\n//import './index.css';\nimport App from './App';\n//import reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}